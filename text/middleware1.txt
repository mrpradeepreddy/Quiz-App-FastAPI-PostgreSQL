from fastapi import FastAPI,Request,Response
from starlette.middleware.base import BaseHTTPMiddleware
import time
from collections import defaultdict
from typing import Dict

app=FastAPI()


class AdvancedMiddleware(BaseHTTPMiddleware):
    def __init__(self,app):
        super().__init__(app)
        self.rate_limit_records:Dict[str,float]=defaultdict(float)

    async def log_message(self,message:str):
        print(message)

    async def dispatch(self,request:Request,call_next):
        
        client_ip=request.client.host
        current_time=time.time()
        
        if current_time-self.rate_limit_records[client_ip]<1:
            return Response(content={"detail":"Rate limit exceeded"},status_code=429)
        path = request.url.path
        if path.startswith("/docs") or path.startswith("/openapi") or path.startswith("/redoc"):
            return await call_next(request)
        self.rate_limit_records[client_ip]=current_time
        # path=request.url.path
        # await self.log_message(f"Request to {path}")
        


        start_time=time.time()
        response=await call_next(request)
        process_Time=time.time()-start_time

        custom_headers={"X-Process-Time":str(process_Time)}
        for header,value in custom_headers.items():
            response.headers[header]=value
        

        await self.log_message(f"Response for {path} took {process_Time} seconds")

        return response

app.add_middleware(AdvancedMiddleware)

@app.get("/")
async def main():
    return {"message": "Hello, World!"}